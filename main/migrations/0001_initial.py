# Generated by Django 5.2 on 2025-05-01 16:59

import django.core.validators
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Book",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "title",
                    models.CharField(max_length=50, unique=True, verbose_name="Name"),
                ),
                (
                    "description",
                    models.CharField(max_length=500, verbose_name="Description"),
                ),
                (
                    "author",
                    models.CharField(
                        blank=True,
                        default="not specified",
                        max_length=50,
                        verbose_name="Author",
                    ),
                ),
                (
                    "image",
                    models.ImageField(blank=True, upload_to="", verbose_name="Image"),
                ),
                ("text", models.FileField(upload_to="", verbose_name="Text")),
                (
                    "price",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="Price",
                    ),
                ),
                (
                    "topic",
                    models.CharField(
                        choices=[
                            ("Modern prose", "Modern prose"),
                            ("Fantasy", "Fantasy"),
                            ("Romantic fantasy", "Romantic fantasy"),
                            ("Fighting fantasy", "Fighting fantasy"),
                            ("Urban fantasy", "Urban fantasy"),
                            ("Dark fantasy", "Dark fantasy"),
                            ("Alternate history", "Alternate history"),
                            ("Fanfic", "Fighting Fanfic"),
                        ],
                        verbose_name="Topic",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        max_length=50, unique=True, verbose_name="username"
                    ),
                ),
                ("password", models.CharField(max_length=255, verbose_name="password")),
                (
                    "avatar",
                    models.ImageField(blank=True, upload_to="", verbose_name="Avatar"),
                ),
                ("verify", models.BooleanField(default=False, verbose_name="Verify")),
                ("blok", models.BooleanField(default=False, verbose_name="Block")),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_superuser", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
